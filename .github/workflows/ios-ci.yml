name: iOS CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test and Build
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.0'
        
    - name: Cache Xcode derived data
      uses: actions/cache@v3
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj') }}
        restore-keys: |
          ${{ runner.os }}-xcode-
          
    - name: Install SwiftLint (if needed)
      run: |
        if ! command -v swiftlint &> /dev/null; then
          brew install swiftlint
        fi
        
    - name: Run SwiftLint
      run: |
        if [ -f .swiftlint.yml ]; then
          swiftlint lint --reporter github-actions-logging
        else
          echo "No SwiftLint configuration found, skipping linting"
        fi
        
    - name: Build project
      run: |
        xcodebuild clean build \
          -project 1V1Mobile.xcodeproj \
          -scheme 1V1Mobile \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Run unit tests
      run: |
        xcodebuild test \
          -project 1V1Mobile.xcodeproj \
          -scheme 1V1Mobile \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -only-testing:1V1MobileTests
          
    - name: Run UI tests
      run: |
        xcodebuild test \
          -project 1V1Mobile.xcodeproj \
          -scheme 1V1Mobile \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -only-testing:1V1MobileUITests
          
    - name: Archive for distribution
      if: github.ref == 'refs/heads/main'
      run: |
        xcodebuild archive \
          -project 1V1Mobile.xcodeproj \
          -scheme 1V1Mobile \
          -destination 'generic/platform=iOS' \
          -archivePath ./build/1V1Mobile.xcarchive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Upload build artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: iOS-Build
        path: ./build/
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      uses: github/codeql-action/init@v2
      with:
        languages: swift
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for vulnerable dependencies
      run: |
        echo "Checking for vulnerable dependencies..."
        # Add dependency vulnerability scanning here
        # This could include checking Swift Package Manager dependencies
        echo "Dependency check completed"
        
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, security-scan, dependency-check]
    if: failure()
    
    steps:
    - name: Notify failure
      run: |
        echo "One or more CI checks failed"
        # Add notification logic here (Slack, email, etc.)
